#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

/* Notice: sometimes, Cppcheck would find the potential NULL pointer bugs,
 * but some of them cannot occur. You can suppress them by adding the
 * following line.
 *   cppcheck-suppress nullPointer
 */

/* private function */
void _node_swap(struct list_head *node1, struct list_head *node2);
// void _node_quick_sort(struct list_head *upper_node, struct list_head *lower_node,struct list_head *head);
// void _list_show(struct list_head *head);
struct list_head *_node_find_mid(struct list_head *head);
struct list_head *_node_merge_sort(struct list_head *head, struct list_head **last);
struct list_head *_node_break_circle_and_remove_head(struct list_head *head);
void _node_show(struct list_head *head);
/* private function */


/* Create an empty queue */
struct list_head *q_new()
{
    struct list_head *n = malloc(sizeof(struct list_head));
    if (!n) return NULL;
    INIT_LIST_HEAD(n);
    return n;
}

/* Free all storage used by queue */
void q_free(struct list_head *l) {
    if (!l) return;
    struct list_head *entry, *safe;
    list_for_each_safe(entry, safe, l) {
        element_t *ele = container_of(entry, element_t, list);
        free(ele->value);
        free(ele);
    };
    free(l);
}

/* Insert an element at head of queue */
bool q_insert_head(struct list_head *head, char *s)
{
    if (!head) return false;
    element_t *ele = malloc(sizeof(element_t));
    if (!ele) return false;
    ele->value = strdup(s);
    INIT_LIST_HEAD(&ele->list);
    list_add(&ele->list,head);
    return true;
}

/* Insert an element at tail of queue */
bool q_insert_tail(struct list_head *head, char *s)
{
    if (!head) return false;
    element_t *ele = malloc(sizeof(element_t));
    if (!ele) return false;
    ele->value = strdup(s);
    INIT_LIST_HEAD(&ele->list);
    list_add_tail(&ele->list,head);
    return true;
}

/* Remove an element from head of queue */
element_t *q_remove_head(struct list_head *head, char *sp, size_t bufsize)
{
    printf("sp: %s\n", sp);
    printf("bufsize: %ld\n", bufsize);

    // sp used to store the remove target
    if (!head || list_empty(head)) return NULL;
    element_t *ele = list_first_entry(head, element_t, list);
    list_del(head->next);
    // strncpy(sp, ele->value, bufsize);
    if (sp) {
        size_t length = (strlen(ele->value) < bufsize - 1)
            ? strlen(ele->value)
            : bufsize - 1;
        memcpy(sp, ele->value, length);
        *(sp + length) = '\0';
    }
    return ele;
}

/* Remove an element from tail of queue */
element_t *q_remove_tail(struct list_head *head, char *sp, size_t bufsize)
{
    // printf("%s\n", sp);
    // sp used to store the remove target
    if (!head || list_empty(head)) return NULL;
    element_t *ele = list_last_entry(head, element_t, list);
    list_del(head->prev);
    // strncpy(sp, ele->value, bufsize);
    if (sp) {
        size_t length = (strlen(ele->value) < bufsize - 1)
            ? strlen(ele->value)
            : bufsize - 1;
        memcpy(sp, ele->value, length);
        *(sp + length) = '\0';
    }
    return ele;
}

/* Return number of elements in queue */
int q_size(struct list_head *head)
{
    if (!head || list_empty(head)) return 0;

    int len = 0;
    struct list_head *lh;
    list_for_each(lh, head)
        len++;
    return len;
}

/* Delete the middle node in queue */
bool q_delete_mid(struct list_head *head)
{
    // https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
    // find middle
    if (!head || list_empty(head)) return false; // failed operator
    int nums = q_size(head)/2;
    
    struct list_head *node, *safe;
    list_for_each_safe(node, safe, head) {
        if (nums<=0) break;
        nums--;
    };
    element_t *ele = container_of(node, element_t, list);
    free(ele->value);
    list_del(node);
    return true;
}

/* Delete all nodes that have duplicate string */
// delete element step
// 1. remove from linked list
// 2. free char space
// 3. free element space
bool q_delete_dup(struct list_head *head)
{
    // https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/
    // // sorted solution // time: O(n)
    // if (!head) return true;
    // struct list_head *curr, *next;
    // curr = head->next;
    // next = curr->next;
    // while (curr!=next && curr!=head && next!=head) {
    //     // printf("START============================\n");
    //     // _list_show(head);
    //     // printf("head: %p\n", head);
    //     // printf("curr: %p\n", curr);
    //     // printf("next: %p\n", next);
    //     element_t *curr_ele = list_entry(curr, element_t, list);
    //     element_t *next_ele = list_entry(next, element_t, list);
    //     // printf("checkpoint\n");

    //     if (strcmp(curr_ele->value, next_ele->value)==0) {
    //         while (strcmp(curr_ele->value, next_ele->value)==0) {
    //             // printf("Iteration:\n");
    //             // _list_show(head);
    //             list_del(next);
    //             next = curr->next;
    //             free(next_ele->value);  // free string space
    //             free(next_ele);         // free element node
    //             next_ele = list_entry(next, element_t, list);
    //             if (next==head) break;
    //         }
    //         list_del(curr);
    //         free(curr_ele->value);
    //         free(curr_ele);
    //         curr_ele = list_entry(curr, element_t, list);
    //         curr = next;
    //         next = curr->next;
    //     } else {
    //         curr = next;
    //         next = curr->next;
    //     }
    // }
    // return true;

    // unsorted solution
    // without hashtable solution, need to check every element. time(nlogn)
    if (!head) return true;
    struct list_head *curr, *next, *safe;
    curr = head->next;
    next = curr->next;
    while (curr!=head) {
        // printf("Iteration:\n");
        // printf("curr: %p\n", curr);
        // printf("next: %p\n", next);
        // _node_show(head);
        element_t *curr_ele = list_entry(curr, element_t, list);
        bool is_dup = false;
        while (next!=head) {
            element_t *next_ele = list_entry(next, element_t, list);
            if (strcmp(curr_ele->value, next_ele->value)==0) {
                is_dup=true;
                list_del(next);
                free(next_ele->value);
                free(next_ele);
                next = curr->next;
            } else {
                next = next->next;
            };
        }
        
        safe = curr->next;
        if (is_dup) {
            list_del(curr);
            free(curr_ele->value);
            free(curr_ele);
            curr = safe;
        }
        // _node_show(head);
        // printf("curr: %p\n", curr);
        // printf("next: %p\n", next);
        curr = safe;
        next = curr->next;
    }
    
    return true;
}

/* Swap every two adjacent nodes */
void q_swap(struct list_head *head)
{
    // https://leetcode.com/problems/swap-nodes-in-pairs/
    if (!head || list_empty(head)) return;
    struct list_head *curr = head->next;
    struct list_head *next = curr->next;
    while (curr!=head && next!=head) {
        curr->prev->next = next;
        next->next->prev = curr;
        curr->next = next->next;
        next->prev = curr->prev;

        curr->prev = next;
        next->next = curr;

        curr = curr->next;
        next = curr->next;
    }
}

/* Reverse elements in queue */
void q_reverse(struct list_head *head) {
    // step1: [curr, n1, n2, n3 ...]
    // step2: [n1, curr, n2, n3 ...]
    // step3: [n2, n1, curr, n3 ...]
    // stepn: [... curr->head]
    if (!head || list_empty(head)) return;
    struct list_head *curr = head->next;
    while (curr->next!=head) {
        list_move(curr->next, head);
    };
}

/* Sort elements of queue in ascending order */
void q_sort(struct list_head *head) {
    if (!head || list_empty(head)) return;
    // merge sort
    struct list_head *list, *last;
    list = _node_break_circle_and_remove_head(head);
    list = _node_merge_sort(list, &last);
    head->next = list;
    list->prev = head;
    last->next = head;
    head->prev = last;

    // // Quick sort
    // _node_quick_sort(head->next, head->prev, head);
}

void _node_show(struct list_head *head) {
    struct list_head *curr = head->next;
    printf("[");
    while (curr!=head) {
        printf(" %s(%p)", list_entry(curr, element_t, list)->value, curr);
        curr = curr->next;
    }
    printf(" ]\n");
}

/* private function */
void _node_quick_sort(struct list_head *upper_node, struct list_head *lower_node,struct list_head *head) {
    // printf("START\n");
    if (upper_node==lower_node || upper_node==head || lower_node==head) return;
    struct list_head *top = upper_node->prev;
    struct list_head *bot = lower_node->next;

    struct list_head *pivot = upper_node;
    struct list_head *left = pivot->next;
    struct list_head *right = lower_node;

    // finally curr point the first element at larger size
    while (left!=right) {
        // printf("Debug========================\n");
        // _list_show(head);
        // printf("left: %s\n", list_entry(left, element_t, list)->value);
        // printf("right: %s\n", list_entry(right, element_t, list)->value);
        // find smaller node from right side
        while (strcmp(list_entry(right, element_t, list)->value,
            list_entry(pivot, element_t, list)->value)>=0 && left!=right) {
            right = right->prev;
        }
        // find larger node from left side
        while (strcmp(list_entry(left, element_t, list)->value,
            list_entry(pivot, element_t, list)->value)<=0 && left!=right) {
            left = left->next;
        }
        // printf("left: %s\n", list_entry(left, element_t, list)->value);
        // printf("right: %s\n", list_entry(right, element_t, list)->value);
        // printf("left: %p\n", left);
        // printf("right: %p\n", right);
        if (left!=right) {
            _node_swap(left, right);
            struct list_head *safe = left;
            left = right;
            right = safe;
        }
        // printf("Debug========================\n");
    }
    // check and swap
    if (strcmp(list_entry(pivot, element_t, list)->value, 
        list_entry(left, element_t, list)->value)>0) {
        _node_swap(pivot, left);
    }
    if (top->next!=pivot) {
        _node_quick_sort(top->next, pivot->prev, head);
    }
    if (bot->prev!=pivot) {
        _node_quick_sort(pivot->next, bot->prev, head);
    }
}

void _node_swap(struct list_head *node1, struct list_head *node2) {
    // ordering sensitive
    struct list_head *safe;
    if (node1->next!=node2 && node2->next!=node1) {
        // a node1 b node2 c
        node1->prev->next = node2;
        node2->next->prev = node1;

        node1->next->prev = node2;
        node2->prev->next = node1;

        safe = node2->prev;
        node2->prev = node1->prev;
        node1->prev = safe;
        // WRITE_ONCE(node1->prev, safe);

        safe = node2->next;
        node2->next = node1->next;
        node1->next = safe;
        // WRITE_ONCE(node1->next, safe);
    } else {
        // used to remove ordinary sensitive
        if (node2->next==node1) {
            safe = node1;
            node1 = node2;
            node2 = safe; 
            // WRITE_ONCE(node2, safe); 
        }
        // head node1 node2
        node1->prev->next = node2;
        node2->next->prev = node1;

        node1->next = node2->next;
        node2->prev = node1->prev;
        node1->prev = node2;
        // WRITE_ONCE(node1->prev, node2);
        node2->next = node1;
    }
}

struct list_head *_node_find_mid(struct list_head *head) {
    if (list_is_singular(head)) return head;
    struct list_head *left = head->next;
    struct list_head *right = head->prev;
    while (left!=right && left->next!=right && right->prev!=left) {
        left=left->next;
        right=right->prev;
    }
    // printf("[end]find mid\n");
    return right;
}

// struct list_head *_node_allocated_merge_sort(struct list_head *head) {
//     // cutting
//     if (list_is_singular(head)) return head;
//     struct list_head *mid = _node_find_mid(head);
//     struct list_head *lhs, *rhs, *curr;
//     lhs = q_new();
//     rhs = q_new();
//
//     list_cut_position(rhs, head, mid);
//     list_cut_position(lhs, head, head->next);
//
//     rhs = _node_merge_sort(rhs);
//     lhs = _node_merge_sort(lhs);
//
//     // allocated mergin 
//     while (!list_empty(lhs) && !list_empty(rhs)) {
//         if (strcmp(list_entry(lhs, element_t, list)->value,
//             list_entry(rhs, element_t, list)->value)<=0) {
//             curr = lhs->next;
//             while (curr!=lhs && strcmp(list_entry(curr, element_t, list)->value,
//                 list_entry(rhs, element_t, list)->value)<=0) {
//                 curr = curr->next;
//             }
//             if (curr!=lhs) {
//                 list_cut_position(mid, lhs, curr);
//                 list_splice_tail(lhs, head);
//                 lhs = mid;
//             } else {
//                 list_splice_tail_init(lhs, head);
//             }
//         } else {
//             curr = rhs->next;
//             while (curr!=rhs && strcmp(list_entry(curr, element_t, list)->value,
//                 list_entry(lhs, element_t, list)->value)<=0) {
//                 curr = curr->next;
//             }
//             if (curr!=rhs) {
//                 list_cut_position(mid, rhs, curr);
//                 list_splice_tail(rhs, head);
//                 rhs = mid;
//             } else {
//                 list_splice_tail_init(rhs, head);
//             }
//         }
//     }
//     list_splice_tail_init(
//         list_empty(lhs) ? rhs : lhs,
//         head
//     );
//     q_free(lhs);
//     q_free(rhs);
//     return head;
// }

struct list_head *_node_break_circle_and_remove_head(struct list_head *head) {
    struct list_head *list = head->next;
    
    // view: head -> NULL <- list
    head->next = NULL;
    list->prev = NULL;

    // view: NULL <- head -> NULL <- list ->NULL
    head->prev->next = NULL;
    head->prev = NULL;
    return list;
}

void _show_list(struct list_head *head) {
    printf("[");
    while (head) {
        printf(" %s(%p)", list_entry(head, element_t, list)->value, head);
        head = head->next;
    }
    printf(" ]\n");
}

struct list_head *_node_merge_sort(struct list_head *list, struct list_head **last) {
    if (list==NULL || list->next==NULL) return list;
    // list without head
    // view: NULL <- list... ->NULL
    // cutting

    // find mid
    // view:
    // 1 2 3 4 5
    //   ^   ^
    //   s   f
    struct list_head *curr=list, *slow=list, *lhs, *rhs; // curr as fast
    while (curr->next && curr->next->next) {
        curr = curr->next->next;
        slow = slow->next;
    }

    lhs = list;
    rhs = slow->next;

    // break list
    slow->next = NULL;
    rhs->prev = NULL;

    // divied
    lhs = _node_merge_sort(lhs, last);
    rhs = _node_merge_sort(rhs, last);


    // merge
    // choose smaller one to be start point
    // printf("DEBUG START=====================================\n");
    // printf("lhs");
    // _show_list(lhs);
    // printf("rhs");
    // _show_list(rhs);
    // printf("checkpoint\n");
    // printf("lhs: %p\n", lhs);
    // printf("rhs: %p\n", rhs);
    if (strcmp(list_entry(lhs, element_t, list)->value, 
        list_entry(rhs, element_t, list)->value)<=0) {
        curr = lhs;
        lhs = lhs->next;
    } else {
        curr = rhs;
        rhs = rhs->next;
    }

    list = curr;
    while (lhs!=NULL && rhs!=NULL) {
        // printf("Iteration:\n");
        // printf("lhs");
        // _show_list(lhs);
        // printf("rhs");
        // _show_list(rhs);

        if (strcmp(list_entry(lhs, element_t, list)->value, 
            list_entry(rhs, element_t, list)->value)<=0) {
            curr->next = lhs;
            lhs->prev = curr;
            lhs = lhs->next;
            while (lhs && strcmp(list_entry(lhs, element_t, list)->value, 
                list_entry(rhs, element_t, list)->value)<=0) {
                curr = curr->next;
                lhs = lhs->next;
            }
            curr = curr->next;
            curr->next = NULL;
        } else {
            curr->next = rhs;
            rhs->prev = curr;
            rhs = rhs->next;
            while (rhs && strcmp(list_entry(rhs, element_t, list)->value, 
                list_entry(lhs, element_t, list)->value)<=0) {
                curr = curr->next;
                rhs = rhs->next;
            }
            curr = curr->next;
            curr->next = NULL;
        }
    }
    if (lhs!=NULL) {
        curr->next = lhs;
        lhs->prev = curr;
    } else {
        curr->next = rhs;
        rhs->prev = curr;
    }
    while (curr->next) {
        curr = curr->next;
    }
    *last = curr;
    // printf("list: ");
    // _show_list(list);
    // printf("DEBUG END=======================================\n");
    return list;
}

